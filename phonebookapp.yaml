AWSTemplateFormatVersion: 2010-09-09
Description: |
  
Parameters:
  MyVPC:
    Description: Choose your VPC
    Type: AWS::EC2::VPC::Id

  MyKeyPair:
    Description: Choose your KeyPair
    Type: AWS::EC2::KeyPair::KeyName

  Subnets:
    Description: 
    Type: AWS::EC2::Subnet::Id


Resources:

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP for application load balancer
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref MyVPC

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP for webserver and SSH for connecting to EC2.
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !Ref MyVPC

  DBSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      DBSecurityGroupIngress: # Required
        - EC2SecurityGroupId: !GetAtt WebServerSecurityGroup.GroupId
      GroupDescription: Allow connection only from ec2 # Required

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: Ipv4
      Scheme: internet-facing
      SecurityGroups: 
        SecurityGroups
      SubnetMappings: 
        - !GetAtt ALBSecurityGroup.GroupId
      Subnets: 
        - !Ref Subnets
      Type: application

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: # Required
        - TargetGroupArn: !Ref TG
          Type: forward
      LoadBalancerArn: !Ref ALB # Required
      Port: 80
      Protocol: HTTP
      
  TG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      ProtocolVersion: HTTP1
      TargetType: instance
      UnhealthyThresholdCount: 3
      VpcId: !Ref MyVPC

  LT:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: ammi-07caf09b362be10b8
        InstanceType: t2.micro
        KeyName: MyKeyPair
        SecurityGroupIds:
          - !GetAtt WebServerSecurityGroup.GroupId
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub Web Server of ${AWS::StackName}
        UserData:
          Fn::Base64:
            !Sub
              - |
                #! /bin/bash -x
                dnf update -y
                dnf install python3 -y
                dnf install python-pip -y
                pip3 install Flask==2.3.3
                pip3 install Flask-MySql
                pip3 install boto3
                dnf install git -y
                echo "${MyDBURI}" > /home/ec2-user/dbserver.endpoint
                cd /home/ec2-user
                TOKEN="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"
                git clone https://$TOKEN@github.com/cnrgrl/phonebook.git
                python3 /home/ec2-user/phonebook/phonebook-app.py
              - MyDBURI: !GetAtt DBInstance.Endpoint.Address
     

Outputs: